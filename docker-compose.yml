version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: socialmedia-postgres
    environment:
      POSTGRES_DB: socialmediaai
      POSTGRES_USER: socialmedia_user
      POSTGRES_PASSWORD: SecurePassword123!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U socialmedia_user -d socialmediaai"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - socialmedia-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: socialmedia-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - socialmedia-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: socialmedia-backend
    environment:
      DATABASE_URL: postgresql://socialmedia_user:SecurePassword123!@postgres:5432/socialmediaai
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      DEBUG: ${DEBUG:-false}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - socialmedia-network

  # Frontend Application
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: socialmedia-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      NEXT_PUBLIC_APP_NAME: Social Media AI Platform
      NEXT_PUBLIC_APP_VERSION: 1.0.0
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - socialmedia-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: socialmedia-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - socialmedia-network
    profiles:
      - production

  # Redis Commander (Development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: socialmedia-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - socialmedia-network
    profiles:
      - development

  # pgAdmin (Development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: socialmedia-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@socialmediaai.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - socialmedia-network
    profiles:
      - development

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: socialmedia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - socialmedia-network
    profiles:
      - monitoring

  # Grafana (Monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: socialmedia-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - socialmedia-network
    profiles:
      - monitoring

networks:
  socialmedia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local